
//! Autogenerated weights for `pallet_airdrop`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-7-24`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/ice-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_airdrop
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// runtime/frost/src/weights/pallet_airdrop_weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_airdrop`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_airdrop::WeightInfo for WeightInfo<T> {
	// Storage: Airdrop ServerAccount (r:1 w:1)
	fn set_airdrop_server_account() -> Weight {
		Weight::from_ref_time(37_542_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Airdrop AirdropChainState (r:1 w:1)
	fn update_airdrop_state() -> Weight {
		Weight::from_ref_time(35_985_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Airdrop AirdropChainState (r:1 w:0)
	// Storage: Airdrop MerkleRoot (r:1 w:0)
	// Storage: Airdrop IconSnapshotMap (r:1 w:1)
	// Storage: Airdrop IceIconMap (r:1 w:1)
	// Storage: Airdrop CreditorAccount (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn dispatch_user_claim() -> Weight {
		Weight::from_ref_time(296_434_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Airdrop AirdropChainState (r:1 w:0)
	// Storage: Airdrop ExchangeAccountsMap (r:1 w:0)
	// Storage: Airdrop MerkleRoot (r:1 w:0)
	// Storage: Airdrop CreditorAccount (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Airdrop IconSnapshotMap (r:1 w:1)
	// Storage: Airdrop IceIconMap (r:1 w:1)
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn dispatch_exchange_claim() -> Weight {
		Weight::from_ref_time(185_976_000 as u64)
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Airdrop MerkleRoot (r:1 w:1)
	fn change_merkle_root() -> Weight {
		Weight::from_ref_time(64_685_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
